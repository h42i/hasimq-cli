#!/usr/bin/env ruby

require 'mqtt'

PREFIX = "[hasimq-cli] "
ERROR  = "[ERROR]"
INFO   = "[INFO]"
COLORS = { "white"  => "ffffff",
           "silver" => "c0c0c0",  
           "gray"   => "808080",
           "black"  => "000000",
           "red"    => "ff0000",
           "maroon" => "800000",
           "yellow" => "ffff00",
           "olive"  => "808000",
           "lime"   => "00ff00",
           "green"  => "008000",
           "aqua"   => "00ffff",
           "teal"   => "008080",
           "blue"   => "0000ff",
           "navy"   => "000080",
           "fuchsia"=> "ff00ff",
           "purple" => "800080" }

def error(message)
  raise PREFIX + ERROR + message
end

def log(message)
  puts PREFIX + INFO + message
end

def publish(topic, payload)
  MQTT::Client.connect('mqtt://atlas.hasi:1883') do |c|
    c.publish(topic, payload)
  end
end

def subscribe(topic)
  puts PREFIX + 
  MQTT::Client.connect('mqtt://atlas.hasi:1883') do |c|
    c.get(topic) do |message|
      log(message)
    end
  end
end

if ARGV[0] == "set"
  if ARGV[1] == "socket"
    if (0..3).include?(ARGV[2].to_i)
      case ARGV[3]
      when "on"
        publish("hasi/sockets/#{ARGV[2]}/set_state", "on") 
      when "off"
        publish("hasi/sockets/#{ARGV[2]}/set_state", "off")
      else
        error("#{ARGV[3]} is an invalid status.")
      end
    else
      error("#{ARGV[2]} is an invalid socket.")
    end
  elsif ARGV[1] == "strip"
    if COLORS.include?(ARGV[2])
      publish("hasi/lights/stripes/set_rgb", COLORS[ARGV[2]])
    else
      error("#{ARGV[2]} is an invalid color name.")
    end
  elsif ARGV[1] == "mpd"
    case ARGV[2]
    when "play"
      publish("hasi/mpd/control", "play")
    when "pause"
      publish("hasi/mpd/control", "pause")
    else
      error("Invalid mpd command.")
    end
  else
    error("Invalid device name.")
  end
  
elsif ARGV[0] == "get"
  case ARGV[1]
  when "temperature"
    subscribe("hasi/sensors/outdoor/temperature")
  when "pressure"
    subscribe("hasi/sensors/outdoor/pressure")
  when "random"
    subscribe("hasi/events/random/byte")
  else
    error("#{ARGV[1]} is an invalid argument.")
  end
elsif ARGV[0] == "help"
  log("https://github.com/h42i/hasimq-cli")
else
  log("https://github.com/h42i/hasimq-cli")
end
